
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id              String    @id @default(uuid())
  email              String
  phone           String
  message         String
  fullName         String
  createdAt       DateTime  @default(now())
}

model Trainee {
  id            String     @id @default(uuid())
  name          String
  email         String? @unique
  education     String
  address       String
  phone         Int?
  accountNumber Int?
  bankType      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  category    String
  price       Float
  itemCount   Int
}

model Dates {
  id            String   @id @default(uuid())
  name          String
  start         DateTime
  end           DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StockItem {
  id          String      @id @default(uuid())
  name        String
  description String
  category    String
  quantity    Int
  price       Float
  image       String?
  area        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Area {
  id          String      @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
model NeededItem {
  id          String      @id @default(uuid())
  name        String
  priority    Priority
  quantity    Int
  area        String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}